This pseudo-code will show how our TDMA protocol works.

First the main loop of the protocol will be shown, this is the state where devices are connected to the network, and no new members are trying to join.

Variables: 
 - Timeslots pr. frame - Letter: \alpha
 - Units in network - Letter: \beta
 - The current units' timeslot id in frame - Letter: \kappa
 - The current timeslot in the frame - Letter: \lambda
 - Time of a timeslot - Letter: \rho

Description:
 - Each unit gets a timeslot in the frame, this is given by their join time, meaning that the first device will have the first timeslot in each frame, and so on.
 - There is an empty timeslot in the end of each frame which can be used by new devices to join the network.
   - Devices currently in the network should alter their current state to adapt to the new device.
 - In your own timeslot you transmit a message to the other devices
 - In other devices' timeslots you receive their transmission and act upon them if applicable. 

Startup()
  network = listenForNetwork(timeout) // Listen to see if there already exists a network.
  if(network != null)
    connectToNetwork()
  else 
    createNetwork()
  

MainLoop()
  if(\lambda == \kappa) // This devices' turn to transmit
  	tx_payload = makePayload()
  	transmitPayload(tx_payload)
  else // This device should receive
  	rx_payload = receive(\rho) // \rho is max timeout to wait. 
  	if(rx_payload != null)
  	    processPayload(rx_payload)

makePayload() 
  // Sets the appropriate variables for a payload.

processPayload(rx_payload)
  switch(rx_payload.type)
    case PING:
      return
    case ANNOUNCEMENT:
      \beta += 1
      \alpha += 1
      if(rx_payload.Worst_Case > \rho)
        \rho = rx_payload.Worst_Case
      return
    case ACTION:
      if(rx_payload.target == \kappa)
        do(rx_payload.instruction)
      return
      